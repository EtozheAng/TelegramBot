
const methodDescription = ["<b>Массив</b> — это одна переменная, хранящая список значений, где каждый элемент определяется отдельным индексом. \n\n", "<b>Строки</b> в JavaScript хранят серии символов, т. е. строка — это набор символов. Строкой может быть любой текст, взятый в двойные или одинарные кавычки. \n\n", "<b>Объект</b> — это тип данных. Он используется для хранения различных коллекций с ключами и их значениями.\n\n", "<b>Числовой тип</b> данных в JavaScript используется для хранения целых чисел и чисел с плавающей точкой.\n\n","<b>ECMAScript 2015 (или ES6)</b> является шестым и основным изданием стандарта спецификации языка ECMAScript. Он определяет стандарт для реализации JavaScript.\n\n"]

const arrayNode = [
  {
    id: 0,
    name: '/pop',
    description: 'Метод pop() массива Javascript удаляет последний элемент из массива и возвращает этот элемент.',
    syntax: 'array.pop();',
    parameter: "",
    return: 'Возвращает удаленный элемент из массива.'
  },
  {
    id: 1,
    name: '/shift',
    description: 'Метод shift() массива Javascript удаляет первый элемент из массива и возвращает этот элемент.',
    syntax: 'array.shift();',
    parameter: "",
    return: 'Возвращает удаленное одиночное значение массива.'
  },
  {
    id: 2,
    name: '/push',
    description: 'Метод push() массива Javascript добавляет заданный элемент (элементы) в конец массива и возвращает длину нового массива.',
    syntax: 'array.push(element1, ..., elementN);',
    parameter: ["element1, ..., elementN: элементы, добавляемые в конец массива."],
    return: 'Возвращает длину нового массива.'
  },
  {
    id: 3,
    name: '/unshift',
    description: 'Метод unshift() массива Javascript добавляет один или несколько элементов в начало массива и возвращает новую длину массива.',
    syntax: 'array.unshift( element1, ..., elementN );',
    parameter: ['element1, ..., elementN − The elements to add to the front of the array.'],
    return: 'Возвращает длину нового массива. Он возвращает undefined в браузере IE.'
  },
  {
    id: 4,
    name: '/splice',
    description: 'Метод splice() массива Javascript изменяет содержимое массива, добавляя новые элементы и удаляя старые элементы.',
    syntax: 'array.splice(index, howMany, [element1][, ..., elementN]);',
    parameter: ["index — индекс, с которого следует начать изменение массива.",
      "howMany − Целое число, указывающее количество старых элементов массива, которые необходимо удалить. Если howMany равно 0, элементы не удаляются.",
      "element1, ..., elementN − Элементы для добавления в массив. Если вы не укажете никаких элементов, splice просто удалит элементы из массива."],
    return: 'Возвращает извлеченный массив на основе переданных параметров.'
  },
  {
    id: 5,
    name: '/concat',
    description: 'Метод concat() массива Javascript возвращает новый массив, состоящий из этого массива, соединенного с двумя или более массивами.',
    syntax: 'array.concat(value1, value2, ..., valueN);',
    return: 'Этот метод возвращает объект массива, представляющий результирующий массив, конкатенацию текущего и заданного массивов.'
  },
  {
    id: 6,
    name: '/slice',
    description: 'Метод slice() массива Javascript извлекает часть массива и возвращает новый массив.',
    syntax: 'array.slice( begin [,end] );',
    parameter: ["begin — индекс с отсчетом от нуля, с которого начинается извлечение. В качестве отрицательного индекса start указывает смещение от конца последовательности.", "end − индекс с отсчетом от нуля, на котором заканчивается извлечение."],
    return: 'Возвращает извлеченный массив на основе переданных параметров.'
  }
]
const stringNode = [
  {
    id: 0,
    name: '/toUpperCase',
    description: 'Метод toUpperCase() используется для перевода всей строки в верхний регистр.',
    syntax: 'string.toUpperCase();',
    parameter: "",
    return: 'Возвращает строку, представляющую указанный объект.'
  },
  {
    id: 1,
    name: '/toLowerCase',
    description: 'Метод toLowercase() используется для преобразования строки в нижний регистр.',
    syntax: 'string.toLowerCase();',
    parameter: "",
    return: 'Возвращает значение строки вызова, преобразованное в нижний регистр.'
  },
  {
    id: 2,
    name: '/slice',
    description: 'Метод slice() извлекает часть строки и возвращает новую строку.',
    syntax: 'string.slice( beginslice [, endSlice] );',
    parameter: ["beginSlice − Отсчитываемый от нуля индекс, с которого начинается извлечение.","endSlice — индекс с отсчетом от нуля, на котором заканчивается извлечение. Если этот параметр опущен, фрагмент извлекается в конец строки."],
    return: 'В случае успеха slice возвращает индекс регулярного выражения внутри строки. В противном случае возвращается -1.'
  },
  {
    id: 3,
    name: '/substring',
    description: 'Метод substring() метод возвращает подмножество объекта String.',
    syntax: 'string.substring(indexA, [indexB])',
    parameter: ["indexA — целое число от 0 до единицы меньше длины строки.","indexB — (необязательно) Целое число от 0 до длины строки."],
    return: 'Метод substring  возвращает новую подстроку на основе заданных параметров.'
  },
  {
    id: 4,
    name: '/substr',
    description: 'Метод substr() возвращает символы в строке, начиная с указанного места и заканчивая указанным количеством символов.',
    syntax: 'string.substr(start[, length]);',
    parameter: ["start — место, с которого начинается извлечение символов (целое число от 0 до единицы меньше длины строки).","length — количество символов для извлечения."],
    return: 'Метод substr() возвращает новую подстроку на основе заданных параметров.'
  },
  {
    id: 5,
    name: '/replace',
    description: 'Метод replace() находит соответствие между регулярным выражением и строкой и заменяет совпадающую подстроку новой подстрокой.',
    syntax: 'string.replace(regexp/substr, newSubStr/function[, flags]);',
    parameter: ["regexp  — Объект регулярного выражения. Совпадение заменяется возвращаемым значением параметра №2.", "substr — строка, которая должна быть заменена на newSubStr.", "newSubStr — строка, которая заменяет подстроку, полученную из параметра № 1.", "function − Функция, которая будет вызываться для создания новой подстроки.","flags — строка, содержащая любую комбинацию флагов RegExp: g — глобальное совпадение, i — игнорирование регистра, m — совпадение в нескольких строках. Этот параметр используется только в том случае, если первый параметр является строкой."],
    return: 'Возвращает новую измененную строку.'
  },
  {
    id: 6,
    name: '/concat',
    description: 'Метод concat() добавляет две или более строк и возвращает новую единственную строку.',
    syntax: 'string.concat(string2, string3[, ..., stringN]);',
    parameter: ["string2...stringN — это строки, которые необходимо объединить."],
    return: 'Возвращает одну объединенную строку.'
  },
  {
    id: 7,
    name: '/trim',
    description: 'Метод trim() используется для удаления пробелов с обеих сторон строки.',
    syntax: 'string.trim()',
    parameter: "",
    return: 'Возвращает строку с вырезанными пробельными символами с её концов.'
  },
  {
    id: 8,
    name: '/split',
    description: 'Метод split() разбивает объект String на массив строк, разделяя строку на подстроки.',
    syntax: 'string.split([separator][, limit]);',
    parameter: ["separator − Определяет символ, используемый для разделения строки. Если разделитель опущен, возвращаемый массив содержит один элемент, состоящий из всей строки.","limit — целое число, указывающее ограничение на количество найденных расщеплений."],
    return: 'Метод split возвращает новый массив. Кроме того, когда строка пуста, функция split возвращает массив, содержащий одну пустую строку, а не пустой массив.'
  },
  {
    id: 9,
    name: '/length',
    description: 'Свойство length возвращает количество символов в строке.',
    syntax: 'string.length',
    parameter: "",
    return: 'Возвращает количество символов в строке.'
  },
]
const objectsNode = [
  {
    id: 0,
    name: '/keys',
    description: 'Статический метод Object.keys() возвращает массив собственных перечислимых имен свойств данного объекта со строковыми ключами.',
    syntax: 'Object.keys(obj);',
    parameter: ["obj - Объект. Обязательное значение."],
    return: 'Массив строк, представляющих собственные перечислимые ключи свойств данного объекта со строковыми ключами.'
  },
  {
    id: 1,
    name: '/values',
    description: 'Статический метод Object.values() возвращает массив собственных перечислимых значений свойств и методов указанного объекта.',
    syntax: 'Object.values(obj);',
    parameter: ["obj - Объект, чьи значения перечисляемых свойств будут возвращены."],
    return: 'Массив содержащий значения перечисляемых свойств объекта.'
  },
  {
    id: 2,
    name: '/create',
    description: 'Статический метод Object.create() создает новый объект, используя существующий объект в качестве прототипа вновь созданного объекта.',
    syntax: 'Object.create(proto)\nObject.create(proto, props) ',
    parameter: ["proto − Объект, который будет использован в качестве прототипа. Может принимать значение null. Необязательный параметр.", "props − Объект, чьи собственные (неунаследованные) перечисляемые свойства представляют собой новые свойства создаваемого объекта, а в качестве значений этих свойств используются дескрипторы. Необязательный параметр."],
    return: 'Новый объект с указанным объектом-прототипом и свойствами.'
  },
  {
    id: 3,
    name: '/freeze',
    description: 'Статический метод Object.freeze() замораживает объект. Замораживание объекта предотвращает расширение и делает существующие свойства недоступными для записи и настройки.',
    syntax: 'Object.freeze(obj)',
    parameter: ["obj − Объект для заморозки. Обязательное значение."],
    return: 'Объект, который был передан функции.'
  },
  {
    id: 4,
    name: '/assign',
    description: 'Статический метод Object.assign() копирует все перечисляемые собственные свойства из одного или нескольких исходных объектов в целевой объект. Он возвращает измененный целевой объект.',
    syntax: 'Object.assign(target, ...sources);',
    parameter: ["target — Целевой объект в который будут скопированы значения всех перечислимых собственных свойств и методов объекта, или объектов, перечисленных в параметре метода. Обязательное значение.","sources — Исходный объект или объекты из которых производиться копирование значений всех перечислимых собственных свойств и методов. Обязательное значение."],
    return: 'Целевой объект.'
  }
]
const numberNode = [
  {
    id: 0,
    name: '/toFixed',
    description: 'Метод toFixed() форматирует числовое значение в строковое, сохраняя при этом указанное количество десятичных знаков. ',
    syntax: 'toFixed()\ntoFixed(digits)',
    parameter: ["digits - Необязательный параметр. Количество цифр после десятичной запятой."],
    return: 'Целое число, которое определяет количество десятичных знаков после запятой. Числовое значение должно находиться в диапазоне от 0 до 20 включительно, некоторые реализации могут дополнительно поддерживать больший диапазон значений. Необязательный параметр. Если аргумент не используется или undefined, то значением по умолчанию считается 0. Если значение параметра digits является нецелым числовым значением, то оно будет округлено вниз до ближайшего целого числа.'
  },
  {
    id: 1,
    name: '/toPrecision',
    description: 'Метод toPrecision() возвращает строку, представляющую объект Number с указанной точностью.',
    syntax: 'toPrecision()\ntoPrecision(precision) ',
    parameter: ["precision - Целое число, указывающее количество значащих цифр."],
    return: 'Возвращает строку, представляющую объект Number в фиксированной или экспоненциальной нотации, округленную до точных значащих цифр.'
  },
  {
    id: 2,
    name: '/parseFloat',
    description: 'Метод parseFloat() принимает в качестве аргумента строковое значение и возвращает десятичное число (число с плавающей точкой).',
    syntax: 'Number.parseFloat( string );',
    parameter: ["string − Строковое значение, которое будет преобразовано к десятичному числу. Обязательное значение."],
    return: 'Число с плавающей запятой, полученное из заданной строки.'
  },
  {
    id: 3,
    name: '/number',
    description: 'Метод Number() используется для преобразования других типов данных в числа.',
    syntax: 'Number(value)',
    parameter: ["value − Значение JavaScript (переменная)."],
    return: 'Возвращает значение в виде числа.'
  },
  {
    id: 4,
    name: '/parseInt',
    description: 'Метод Number.parseInt() разбирает строковый аргумент и возвращает целое число. ',
    syntax: 'Number.parseInt( string );\nNumber.parseInt( string, radix );',
    parameter: ["string — Строковое значение, которое будет преобразовано к целому числу. Обязательное значение.","radix — Целое число от 2 до 36, указывающее основание числа в математических системах счисления."],
    return: 'Целое число, полученное парсингом (разбором и интерпретацией) переданной строки. Если первый символ строки не может быть преобразован в число, то возвращается NaN.'
  }
]
const es6Node = [
  {
    id: 0,
    name: '/map',
    description: 'Метод map() создаёт новый массив с результатом вызова указанной функции для каждого элемента массива.',
    syntax: 'let newArray = array.map( function( currentValue, index, arr ),thisValue ); ',
    parameter: ["function — Функция обратного вызова, которая будет выполнена один раз для каждого элемента в массиве. Функция принимает следующие параметры:\ncurrentValue - значение текущего элемента\nindex - индекс массива текущего элемента.\narr - массив, к которому принадлежит текущий элемент(по которому происходит проход).\nЕсли в качестве параметра метода передается что - то, что не является объектом функции, то будет вызвано исключение TypeError.Обязательный параметр.","thisValue — Объект, на который может ссылаться ключевое слово this внутри функции обратного вызова. Если параметр thisValue не используется, то в качестве значения this будет использоваться undefined (в конечном счете this будет зависеть от обычных правил контекста выполнения функции). Необязательный параметр."],
    return: 'Новый массив, где каждый элемент является результатом callback функции.'
  },
  {
    id: 1,
    name: '/every',
    description: 'Метод every() проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции.',
    syntax: 'arr.every(callback(currentValue[, index[, arr]])[, thisArg])',
    parameter: ["function — Функция обратного вызова, которая будет выполнена один раз для каждого элемента в массиве. Функция принимает следующие параметры:\ncurrentValue - значение текущего элемента\nindex - индекс массива текущего элемента.\narr - массив, к которому принадлежит текущий элемент(по которому происходит проход).\nЕсли в качестве параметра метода передается что - то, что не является объектом функции, то будет вызвано исключение TypeError.Обязательный параметр.","thisValue — Объект, на который может ссылаться ключевое слово this внутри функции обратного вызова. Если параметр thisValue не используется, то в качестве значения this будет использоваться undefined (в конечном счете this будет зависеть от обычных правил контекста выполнения функции). Необязательный параметр."],
    return: 'true если функция проверки возвращает truthy значение для каждого элемента массива. Иначе, false.'
  },
  {
    id: 2,
    name: '/includes',
    description: 'Метод includes() определяет, содержит ли массив определённый элемент, возвращая в зависимости от этого true или false.',
    syntax: 'array.includes( searchElement, fromIndex );',
    parameter: ["searchElement − Значение, которое требуется найти внутри массива. Обязательное значение.","fromIndex − Целое число, определяющее индекс массива, с которого начинается поиск элемента массива. Необязательное значение, если не указано, то поиск осуществляется с 0 индекса."],
    return: 'Boolean.'
  },
  {
    id: 3,
    name: '/for_of',
    description: 'Оператор JavaScript for of перебирает значения итерируемого объекта. Он позволяет перебирать итерируемые структуры данных, такие как Arrays, Strings, Maps, NodeLists и другие.',
    syntax: 'for (variable of iterable) {\nstatement\n}',
    parameter: ["variable − На каждом шаге итерации variable присваивается значение нового свойства объекта iterable. Переменная variable может быть также объявлена с помощью const, let или var.","iterable − Объект, перечисляемые свойства которого обходятся во время выполнения цикла."],
    return: 'Возвращает значения итерируемого объекта'
  },
  {
    id: 4,
    name: '/spread',
    description: 'Спред-синтаксис (spread) ... позволяет передавать итерируемые коллекции (например, массивы или строки) как список аргументов функции или добавлять содержащиеся в них элементы в новый массив.',
    syntax: 'let objClone = { ...obj };',
    parameter: ["obj — Объект"],
    return: 'Возвращает один объединенный массив/строку/объект.'
  },
  {
    id: 5,
    name: '/filter',
    description: 'Метод filter() создаёт новый массив со всеми элементами, прошедшими проверку, задаваемую в передаваемой функции.',
    syntax: 'array.filter(callback[, thisObject]);',
    parameter: ["callback — Функция для проверки каждого элемента массива.","thisObject — Объект для использования в качестве этого при выполнении обратного вызова."],
    return: 'Возвращает созданный массив.'
  },
  {
    id: 6,
    name: '/reduce',
    description: 'Метод reduce() применяет функцию reducer к каждому элементу массива (слева-направо), возвращая одно результирующее значение.',
    syntax: 'array.reduce(callback[, initialValue])',
    parameter: ["callback — Функция для проверки каждого элемента массива.","thisObject — Необязательный параметр. Объект, используемый в качестве первого аргумента при первом вызове функции callback."],
    return: 'Возвращает уменьшенное одиночное значение массива.'
  },
]

module.exports = { methodDescription, arrayNode, stringNode, objectsNode, numberNode, es6Node }  